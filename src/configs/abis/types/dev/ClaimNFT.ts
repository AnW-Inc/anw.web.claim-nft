/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../common'

export declare namespace ClaimNFT {
  export type InfoClaimNFTStruct = {
    timeClaim: PromiseOrValue<BigNumberish>
    nftId: PromiseOrValue<BigNumberish>
    receiver: PromiseOrValue<string>
    ref: PromiseOrValue<string>
  }

  export type InfoClaimNFTStructOutput = [BigNumber, BigNumber, string, string] & {
    timeClaim: BigNumber
    nftId: BigNumber
    receiver: string
    ref: string
  }
}

export interface ClaimNFTInterface extends utils.Interface {
  functions: {
    '_countMinted()': FunctionFragment
    '_tokenIds()': FunctionFragment
    'addressToString(address)': FunctionFragment
    'anWNFT()': FunctionFragment
    'claimNFT()': FunctionFragment
    'getInfoClaimNFT(address)': FunctionFragment
    'getSlice(uint256,uint256)': FunctionFragment
    'indexOfClaimNFTs(address)': FunctionFragment
    'infoClaimNFTs(uint256)': FunctionFragment
    'initByOwner(bool,address)': FunctionFragment
    'initialize()': FunctionFragment
    'isClaim()': FunctionFragment
    'isClaimedNFT(address)': FunctionFragment
    'listInfoClaimNFT(uint256,uint256)': FunctionFragment
    'minFee()': FunctionFragment
    'owner()': FunctionFragment
    'pause()': FunctionFragment
    'paused()': FunctionFragment
    'refAddresses(string)': FunctionFragment
    'refs(address)': FunctionFragment
    'registerClaimNFT(string)': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'setAnWNFT(address)': FunctionFragment
    'setInfoClaimNFT(uint256,address,uint256,uint256)': FunctionFragment
    'setIsClaim(bool)': FunctionFragment
    'setMinFee(uint256)': FunctionFragment
    'setTimeWait(uint256)': FunctionFragment
    'timeWait()': FunctionFragment
    'totalRefs(address)': FunctionFragment
    'transferOwnership(address)': FunctionFragment
    'unpause()': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | '_countMinted'
      | '_tokenIds'
      | 'addressToString'
      | 'anWNFT'
      | 'claimNFT'
      | 'getInfoClaimNFT'
      | 'getSlice'
      | 'indexOfClaimNFTs'
      | 'infoClaimNFTs'
      | 'initByOwner'
      | 'initialize'
      | 'isClaim'
      | 'isClaimedNFT'
      | 'listInfoClaimNFT'
      | 'minFee'
      | 'owner'
      | 'pause'
      | 'paused'
      | 'refAddresses'
      | 'refs'
      | 'registerClaimNFT'
      | 'renounceOwnership'
      | 'setAnWNFT'
      | 'setInfoClaimNFT'
      | 'setIsClaim'
      | 'setMinFee'
      | 'setTimeWait'
      | 'timeWait'
      | 'totalRefs'
      | 'transferOwnership'
      | 'unpause',
  ): FunctionFragment

  encodeFunctionData(functionFragment: '_countMinted', values?: undefined): string
  encodeFunctionData(functionFragment: '_tokenIds', values?: undefined): string
  encodeFunctionData(functionFragment: 'addressToString', values: [PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: 'anWNFT', values?: undefined): string
  encodeFunctionData(functionFragment: 'claimNFT', values?: undefined): string
  encodeFunctionData(functionFragment: 'getInfoClaimNFT', values: [PromiseOrValue<string>]): string
  encodeFunctionData(
    functionFragment: 'getSlice',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(functionFragment: 'indexOfClaimNFTs', values: [PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: 'infoClaimNFTs', values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: 'initByOwner', values: [PromiseOrValue<boolean>, PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: 'initialize', values?: undefined): string
  encodeFunctionData(functionFragment: 'isClaim', values?: undefined): string
  encodeFunctionData(functionFragment: 'isClaimedNFT', values: [PromiseOrValue<string>]): string
  encodeFunctionData(
    functionFragment: 'listInfoClaimNFT',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(functionFragment: 'minFee', values?: undefined): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string
  encodeFunctionData(functionFragment: 'refAddresses', values: [PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: 'refs', values: [PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: 'registerClaimNFT', values: [PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string
  encodeFunctionData(functionFragment: 'setAnWNFT', values: [PromiseOrValue<string>]): string
  encodeFunctionData(
    functionFragment: 'setInfoClaimNFT',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string
  encodeFunctionData(functionFragment: 'setIsClaim', values: [PromiseOrValue<boolean>]): string
  encodeFunctionData(functionFragment: 'setMinFee', values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: 'setTimeWait', values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: 'timeWait', values?: undefined): string
  encodeFunctionData(functionFragment: 'totalRefs', values: [PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string

  decodeFunctionResult(functionFragment: '_countMinted', data: BytesLike): Result
  decodeFunctionResult(functionFragment: '_tokenIds', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'addressToString', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'anWNFT', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'claimNFT', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getInfoClaimNFT', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getSlice', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'indexOfClaimNFTs', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'infoClaimNFTs', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'initByOwner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isClaim', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isClaimedNFT', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'listInfoClaimNFT', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'minFee', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'refAddresses', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'refs', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'registerClaimNFT', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setAnWNFT', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setInfoClaimNFT', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setIsClaim', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setMinFee', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setTimeWait', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'timeWait', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'totalRefs', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result

  events: {
    'OwnershipTransferred(address,address)': EventFragment
    'Paused(address)': EventFragment
    'Unpaused(address)': EventFragment
    'claimNFTEvent(uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'claimNFTEvent'): EventFragment
}

export interface OwnershipTransferredEventObject {
  previousOwner: string
  newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export interface PausedEventObject {
  account: string
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>

export type PausedEventFilter = TypedEventFilter<PausedEvent>

export interface UnpausedEventObject {
  account: string
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>

export interface claimNFTEventEventObject {
  nftId: BigNumber
}
export type claimNFTEventEvent = TypedEvent<[BigNumber], claimNFTEventEventObject>

export type claimNFTEventEventFilter = TypedEventFilter<claimNFTEventEvent>

export interface ClaimNFT extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: ClaimNFTInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    _countMinted(overrides?: CallOverrides): Promise<[BigNumber] & { _value: BigNumber }>

    _tokenIds(overrides?: CallOverrides): Promise<[BigNumber] & { _value: BigNumber }>

    addressToString(_addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>

    anWNFT(overrides?: CallOverrides): Promise<[string]>

    claimNFT(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    getInfoClaimNFT(
      sender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, string] & {
        _timeClaim: BigNumber
        _receiver: string
        _index: BigNumber
        _nftId: BigNumber
        _ref: string
      }
    >

    getSlice(
      begin: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string]>

    indexOfClaimNFTs(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>

    infoClaimNFTs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, string, string] & {
        timeClaim: BigNumber
        nftId: BigNumber
        receiver: string
        ref: string
      }
    >

    initByOwner(
      _isClaim: PromiseOrValue<boolean>,
      _anWNFT: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    initialize(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    isClaim(overrides?: CallOverrides): Promise<[boolean]>

    isClaimedNFT(receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>

    listInfoClaimNFT(
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[ClaimNFT.InfoClaimNFTStructOutput[]]>

    minFee(overrides?: CallOverrides): Promise<[BigNumber]>

    owner(overrides?: CallOverrides): Promise<[string]>

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    paused(overrides?: CallOverrides): Promise<[boolean]>

    refAddresses(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>

    refs(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>

    registerClaimNFT(
      ref: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    setAnWNFT(
      _anWNFT: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    setInfoClaimNFT(
      _timeClaim: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      _nftId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    setIsClaim(
      _isClaim: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    setMinFee(
      _minFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    setTimeWait(
      _timeWait: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    timeWait(overrides?: CallOverrides): Promise<[BigNumber]>

    totalRefs(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber] & { _value: BigNumber }>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>
  }

  _countMinted(overrides?: CallOverrides): Promise<BigNumber>

  _tokenIds(overrides?: CallOverrides): Promise<BigNumber>

  addressToString(_addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>

  anWNFT(overrides?: CallOverrides): Promise<string>

  claimNFT(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

  getInfoClaimNFT(
    sender: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, string, BigNumber, BigNumber, string] & {
      _timeClaim: BigNumber
      _receiver: string
      _index: BigNumber
      _nftId: BigNumber
      _ref: string
    }
  >

  getSlice(
    begin: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<string>

  indexOfClaimNFTs(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

  infoClaimNFTs(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, string, string] & {
      timeClaim: BigNumber
      nftId: BigNumber
      receiver: string
      ref: string
    }
  >

  initByOwner(
    _isClaim: PromiseOrValue<boolean>,
    _anWNFT: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  initialize(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

  isClaim(overrides?: CallOverrides): Promise<boolean>

  isClaimedNFT(receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>

  listInfoClaimNFT(
    from: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<ClaimNFT.InfoClaimNFTStructOutput[]>

  minFee(overrides?: CallOverrides): Promise<BigNumber>

  owner(overrides?: CallOverrides): Promise<string>

  pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

  paused(overrides?: CallOverrides): Promise<boolean>

  refAddresses(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>

  refs(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>

  registerClaimNFT(
    ref: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

  setAnWNFT(
    _anWNFT: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  setInfoClaimNFT(
    _timeClaim: PromiseOrValue<BigNumberish>,
    _receiver: PromiseOrValue<string>,
    _index: PromiseOrValue<BigNumberish>,
    _nftId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  setIsClaim(
    _isClaim: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  setMinFee(
    _minFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  setTimeWait(
    _timeWait: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  timeWait(overrides?: CallOverrides): Promise<BigNumber>

  totalRefs(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

  callStatic: {
    _countMinted(overrides?: CallOverrides): Promise<BigNumber>

    _tokenIds(overrides?: CallOverrides): Promise<BigNumber>

    addressToString(_addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>

    anWNFT(overrides?: CallOverrides): Promise<string>

    claimNFT(overrides?: CallOverrides): Promise<void>

    getInfoClaimNFT(
      sender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, string] & {
        _timeClaim: BigNumber
        _receiver: string
        _index: BigNumber
        _nftId: BigNumber
        _ref: string
      }
    >

    getSlice(
      begin: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>

    indexOfClaimNFTs(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    infoClaimNFTs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, string, string] & {
        timeClaim: BigNumber
        nftId: BigNumber
        receiver: string
        ref: string
      }
    >

    initByOwner(
      _isClaim: PromiseOrValue<boolean>,
      _anWNFT: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    initialize(overrides?: CallOverrides): Promise<void>

    isClaim(overrides?: CallOverrides): Promise<boolean>

    isClaimedNFT(receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>

    listInfoClaimNFT(
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<ClaimNFT.InfoClaimNFTStructOutput[]>

    minFee(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<string>

    pause(overrides?: CallOverrides): Promise<void>

    paused(overrides?: CallOverrides): Promise<boolean>

    refAddresses(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>

    refs(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>

    registerClaimNFT(ref: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    setAnWNFT(_anWNFT: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

    setInfoClaimNFT(
      _timeClaim: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      _nftId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>

    setIsClaim(_isClaim: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>

    setMinFee(_minFee: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>

    setTimeWait(_timeWait: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>

    timeWait(overrides?: CallOverrides): Promise<BigNumber>

    totalRefs(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

    unpause(overrides?: CallOverrides): Promise<void>
  }

  filters: {
    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter

    'Paused(address)'(account?: null): PausedEventFilter
    Paused(account?: null): PausedEventFilter

    'Unpaused(address)'(account?: null): UnpausedEventFilter
    Unpaused(account?: null): UnpausedEventFilter

    'claimNFTEvent(uint256)'(nftId?: null): claimNFTEventEventFilter
    claimNFTEvent(nftId?: null): claimNFTEventEventFilter
  }

  estimateGas: {
    _countMinted(overrides?: CallOverrides): Promise<BigNumber>

    _tokenIds(overrides?: CallOverrides): Promise<BigNumber>

    addressToString(_addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    anWNFT(overrides?: CallOverrides): Promise<BigNumber>

    claimNFT(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    getInfoClaimNFT(sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    getSlice(
      begin: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    indexOfClaimNFTs(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    infoClaimNFTs(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

    initByOwner(
      _isClaim: PromiseOrValue<boolean>,
      _anWNFT: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    initialize(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    isClaim(overrides?: CallOverrides): Promise<BigNumber>

    isClaimedNFT(receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    listInfoClaimNFT(
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    minFee(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    paused(overrides?: CallOverrides): Promise<BigNumber>

    refAddresses(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    refs(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    registerClaimNFT(
      ref: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    setAnWNFT(
      _anWNFT: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    setInfoClaimNFT(
      _timeClaim: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      _nftId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    setIsClaim(
      _isClaim: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    setMinFee(
      _minFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    setTimeWait(
      _timeWait: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    timeWait(overrides?: CallOverrides): Promise<BigNumber>

    totalRefs(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>
  }

  populateTransaction: {
    _countMinted(overrides?: CallOverrides): Promise<PopulatedTransaction>

    _tokenIds(overrides?: CallOverrides): Promise<PopulatedTransaction>

    addressToString(_addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    anWNFT(overrides?: CallOverrides): Promise<PopulatedTransaction>

    claimNFT(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

    getInfoClaimNFT(sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    getSlice(
      begin: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    indexOfClaimNFTs(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    infoClaimNFTs(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    initByOwner(
      _isClaim: PromiseOrValue<boolean>,
      _anWNFT: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    initialize(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

    isClaim(overrides?: CallOverrides): Promise<PopulatedTransaction>

    isClaimedNFT(receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    listInfoClaimNFT(
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    minFee(overrides?: CallOverrides): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>

    refAddresses(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    refs(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    registerClaimNFT(
      ref: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

    setAnWNFT(
      _anWNFT: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    setInfoClaimNFT(
      _timeClaim: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      _nftId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    setIsClaim(
      _isClaim: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    setMinFee(
      _minFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    setTimeWait(
      _timeWait: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    timeWait(overrides?: CallOverrides): Promise<PopulatedTransaction>

    totalRefs(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>
  }
}
